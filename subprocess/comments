METHOD1: waiting child process finished

1. subprocess.call(args, *, stdin=None, stdout=None, stderr=None, shell=False)
Run the command described by args. Wait for command to complete, then return the returncode attribute.

2. subprocess.check_output(args, *, stdin=None, stderr=None, shell=False, universal_newlines=False)
Run command with arguments and return its output as a byte string. If the return code was non-zero it raises a subprocess.CalledProcessError.

NOTES:

1. args is required for all calls and should be a string, or a sequence of program arguments.
Providing a sequence of arguments is generally preferred, as it allows the module to take care of any required escaping and quoting of arguments.
If passing a single string, either shell must be True or else the string must simply name the program to be executed without specifying any arguments.

2. stdin, stdout and stderr specify the executed program’s standard input, standard output and standard error file handles, respectively.

3. If shell is True, the specified command will be executed through the shell.
This can be useful if you are using Python primarily for the enhanced control flow it offers over most system shells and still want convenient access to other shell features such as shell pipes, filename wildcards, environment variable expansion, and expansion of ~ to a user’s home directory.
shell=False disables all shell based features, but does not suffer from this vulnerability.

METHOD2: not waiting child process finished

1. subprocess.Popen(args, bufsize=0, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=False, shell=False, cwd=None, env=None, universal_newlines=False, startupinfo=None, creationflags=0)

NOTES:

1. Popen.communicate(input=None)
Interact with process: Send data to stdin. Read data from stdout and stderr, until end-of-file is reached. Wait for process to terminate.
The optional input argument should be a string to be sent to the child process, or None. communicate() returns a tuple (stdoutdata, stderrdata).
Create the Popen object with stdin=PIPE, stdout=PIPE, stderr=PIPE if you want send/read data to/from child process.
2. Popen.returncode
A None value indicates that the process hasn’t terminated yet. A negative value -N indicates that the child was terminated by signal N (Unix only).
3. Popen.stdin
If the stdin argument was PIPE, this attribute is a file object that provides input to the child process. Otherwise, it is None.
4. Popen.stdout
If the stdout argument was PIPE, this attribute is a file object that provides output from the child process. Otherwise, it is None.
5. Popen.stderr
If the stderr argument was PIPE, this attribute is a file object that provides error output from the child process. Otherwise, it is None.

EXAMPLES:

import subprocess
child = subprocess.Popen(["cat"], stdin=subprocess.PIPE)
child.communicate("hc")

p=subprocess.Popen("df -h", shell=True, stdout=subprocess.PIPE)
out=p.stdout.readlines()

